
Phase 2: Code Standardization

Agent Role: Code Style and Organization Specialist

Primary Objectives:
1. Implement consistent code style across the codebase.
2. Standardize documentation to improve readability and maintainability.
3. Configure and enforce linting to catch errors and enforce style guidelines.

Tasks and Instructions

Task A: Style Configuration Files
Goal: Set up configuration files to enforce consistent code style across editors and tools.

1. Create `.editorconfig` for basic formatting rules:
   - Action: Add `.editorconfig` to the project root to enforce uniform indentation, line endings, and character encodings.
   - Configuration:
      ```ini
      root = true

      [*]
      end_of_line = lf
      insert_final_newline = true
      trim_trailing_whitespace = true
      charset = utf-8

      [*.{py,pyw}]
      indent_style = space
      indent_size = 4
      max_line_length = 88

      [*.{js,jsx,ts,tsx,css,html}]
      indent_style = space
      indent_size = 2
      ```
   - Purpose: This file ensures consistency across different development environments and editors.

2. Create `.pylintrc` for Python linting configuration:
   - Action: Set up `.pylintrc` with rules for `pylint` to enforce Python style guidelines.
   - Configuration:
      ```ini
      [MASTER]
      ignore=CVS
      persistent=yes
      load-plugins=

      [MESSAGES CONTROL]
      disable=C0111,R0903,C0103

      [FORMAT]
      max-line-length=88
      indent-string='    '

      [BASIC]
      good-names=i,j,k,ex,Run,_
      ```
   - Purpose: This configuration will help maintain consistent code style and reduce the likelihood of minor coding errors.

3. Create `setup.cfg` for additional linting and testing configurations:
   - Action: Add `setup.cfg` to configure `flake8` for Python style checking and `pytest` for testing conventions.
   - Configuration:
      ```ini
      [flake8]
      max-line-length = 88
      extend-ignore = E203
      exclude = .git,__pycache__,build,dist

      [tool:pytest]
      testpaths = tests
      python_files = test_*.py
      python_functions = test_*
      ```
   - Purpose: This file centralizes style and testing configurations, ensuring consistency across the project.

Task B: File-Specific Style Fixes
Goal: Update key modules for compliance with style guidelines.

1. Standardize `src/web/web_app.py` for consistent style and documentation:
   - Action: Add module-level docstrings and ensure functions follow the standardized code style.
   - Example:
      ```python
      """Web application module for HiveMind system."""

      import logging
      from typing import Optional, Tuple

      from flask import Flask, jsonify, request
      from flask_socketio import SocketIO

      logger = logging.getLogger(__name__)

      def initialize_components() -> Tuple[Optional[MongoMemoryStore], Optional[MessageBroker], Optional[MasterAgent]]:
          """Initialize system components.

          Returns:
              tuple: Initialized components (memory_store, message_broker, master_agent)
          """
          try:
              memory_store = MongoMemoryStore()
              message_broker = MessageBroker()
              master_agent = MasterAgent()
              return memory_store, message_broker, master_agent
          except Exception as e:
              logger.error(f"Failed to initialize components: {e}")
              return None, None, None
      ```
   - Purpose: Ensure that code is properly documented and adheres to consistent formatting.

2. Standardize `src/roles/master_agent.py` for uniform formatting and documentation:
   - Action: Add class and method docstrings to improve readability.
   - Example:
      ```python
      """Master agent module for coordinating other agents."""

      from typing import Dict, List, Optional
      from datetime import datetime

      class MasterAgent:
          """Coordinates and manages other agents in the system."""

          def __init__(self, role_manager: RoleManager, capability_register: CapabilityRegister):
              """Initialize master agent.

              Args:
                  role_manager: Manager for agent roles
                  capability_register: Registry of agent capabilities
              """
              self.role_manager = role_manager
              self.capability_register = capability_register
              self._setup_message_handling()
      ```
   - Purpose: Consistent use of docstrings makes it easier for new developers to understand each moduleâ€™s purpose.

Task C: JavaScript Standardization
Goal: Set up JavaScript formatting rules to enforce style guidelines across the web interface.

1. Create `.prettierrc` for JavaScript code formatting:
   - Action: Add `.prettierrc` to enforce JavaScript style guidelines.
   - Configuration:
      ```json
      {
        "semi": true,
        "trailingComma": "es5",
        "singleQuote": true,
        "printWidth": 80,
        "tabWidth": 2
      }
      ```
   - Purpose: Ensure that JavaScript code has a consistent style for readability and maintenance.

2. Standardize `src/web/static/js/messages.js` for consistent documentation and style:
   - Action: Add module-level comments and function docstrings.
   - Example:
      ```javascript
      /**
       * Message handling module
       * @module messages
       */

      const MessageHandler = {
        /**
         * Initialize message handling
         * @param {Object} config - Configuration options
         */
        init(config) {
          this.socket = io();
          this.setupEventListeners();
        },

        /**
         * Setup WebSocket event listeners
         * @private
         */
        setupEventListeners() {
          this.socket.on('message', this.handleMessage.bind(this));
          this.socket.on('error', this.handleError.bind(this));
        }
      };
      ```
   - Purpose: Structured comments and style compliance improve readability and maintainability.

Verification Checklist
- [ ] Style Config Files Created: Confirm `.editorconfig`, `.pylintrc`, and `setup.cfg` files are present.
- [ ] Code Standardization Completed: Ensure `src/web/web_app.py` and `src/roles/master_agent.py` follow the style guidelines.
- [ ] JavaScript Standardization Completed: Verify that `.prettierrc` and `src/web/static/js/messages.js` adhere to style rules.

Summary for the Agent
In Phase 2, your objective is to enforce code style and standardization across the project. This includes setting up configuration files for style enforcement, updating key modules to follow standardized conventions, and implementing consistent documentation practices.
